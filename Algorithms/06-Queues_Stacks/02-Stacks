Stack Implementation Based on Array
Build essential methods push, pop, top, contains, isEmpty, size for ArrStack using an array. 
Make sure you designate the underlying array as private (declared var), not public (attached to this).
- ArrStack: Push
Create push(val) that adds val to our stack.
- ArrStack: Top
Return (not remove) the stack’s top value. 
- ArrStack: Is Empty
Return whether the stack is empty. 
- ArrStack: Pop
Create pop() to remove and return the top val. 
- ArrStack: Contains
Return whether given val is within the stack.
- ArrStack: Size
Return the number of stacked values. 
Now that you’re warmed up, create a list-based class SLStack, with a singly linked list:
- SLStack: Push
Create push(val) that adds val to our stack.
- SLStack: Top
Return (not remove) the stack’s top value. 
- SLStack: Is Empty
Return whether the stack is empty. 
- SLStack: Pop
Create pop() to remove and return the top val. 
- SLStack: Contains
Return whether given val is within the stack.
- SLStack: Size
Return the number of stacked values. 
- Compare Stacks
Given two Stack objects, create a standalone function to return whether they are equal. Stacks are 
equal only if they have equal elements in identical order. You can use an additional third Stack for 
storage; you will need it because you must return the given Stacks to their original condition upon exit.