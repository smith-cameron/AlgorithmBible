

- Reorder Absolute Queue
Rob sees the world in clear black-and-white terms. Scott, however, is more likely to say “it depends” 
and see shades of grey. Create a standalone function that accepts a Queue of numbers, sequenced in 
absolute-value order, such as (10,-20,30,-40,50). Using only an additional Stack for storage, 
reorder the Queue values so that they are in increasing order, such as (-40,-20,10,30,50). 

- Stack: Partition
Numerous values are stored in a Stack. Divide the
values into a group of positive numbers and a 
group of zero-or-negative numbers. Rearrange 
the Stack’s values so that when popping, all non positive values come before all positive numbers. 
The original order can otherwise be disregarded. 
Use only one Queue for additional storage. 

- Stack: Is Sorted
Given a Stack containing numerical values, write 
a standalone function that returns a boolean to 
represent whether the stack’s values are sorted
from smallest (at Stack top) to largest (at bottom).
Use only one another Stack or a Queue (not both)
for storage. 

- Stack: Switch Pairs
Given Stack containing integers, switch 
successive pairs of values starting at bottom of 
stack. If there is an odd number of values, the top 
value is unaffected. For example, assuming we 
list top values first, Stack (1,2,3,4,5,6,7)
should become (1,3,2,5,4,7,6). Use only 
one additional Queue for storage. 

- Stack: Mirror
Anna has a curiosity with numbers and strings 
that are the same forwards and backwards. Mirror
a Stack’s existing values onto itself, in reverse. 
Sending Stack (1,3,5,7) to your function 
should change it to (1,3,5,7,7,5,3,1). Use 
one other Stack or Queue (not both) for storage. 
Is your mental queue overly full of queue/stack problems? Here’s something different:

- Weak Finger
Let’s count on our fingers! Write a function to return how far you can count on one hand, continually
from finger 1 to 5 then back again. However, one finger is weak and limits the number of times you can 
use it. You are sent the number of the weak finger, and how many times you can use it. After that, you
can neither count on it nor skip it. If you count the sequence 1,2,3,4,5,4,3,2,1,2,3, you would
return 11 as number of counts. Given (5,0) return 4, as you would count fingers 1,2,3,4 (stopping 
before first 5). Given (2,1) return 7: you’d count 1,2,3,4,5,4,3 (stopping before second 2). 