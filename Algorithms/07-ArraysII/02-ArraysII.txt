
- Array: Flatten
Flatten a given array, eliminating nested & empty arrays. Do not alter it; return a new one retaining order. For [1,[2,3],4,[]] return [1,2,3,4]. 
    Second: work ‘in-place’ in the given array (do not create another). Alter order if needed. Ex.: [1,[2,3],4,[]] could become [1,3,4,2]. 
    Third: make your algorithm both in-place and stable. Do you need a return value? 

- Array: Remove Duplicates Remove array duplicates. Do not alter original.  Return new array with results ‘stable’ (original  order). For [1,2,1,3,4,2] return [1,2,3,4]. 
    Second: work ‘in-place’ in given array. Alter  order if needed (stability is not required). Ex.:  [1,2,1,3,4,2] could become [1,2,4,3]. 
    Third: make it in-place and stable. 
    Fourth: eliminate any second (inner) loop.

- Array: Mode
Back in the Basic 13, you wrote code to compute an array’s minimum and maximum values. You also  wrote code to determine average value (the “mean”). What about the “mode” – the most common value  in that data set. Create a function that, given an array, returns the most frequent value in the array. 
    Second: memory constraints prevent your using a new array. How does this affect your solution?

- Array: Buffer Copy
Create arrBufferCopy(sourceArr,destArr,sourceStartIdx,destStartIdx,numVals) to copy numVals values starting at sourceArr[sourceStartIdx] to destArr[destStartIdx] etc.  Do not lengthen destArr, nor read off the end of sourceArr. 
    Second: if you reach either array’s end, wraparound to continue writing/reading at beginning of array.
    Third: if numVals > destArr.length, only copy the minimum needed amount. 
    Fourth: sourceArr can now be the same array as destArr! Only handle the non-wrap case. That is,  you can assume that you won’t need to read beyond arr.length. You can extend the array on writes. 
    Fifth: if you made it this far, good job! Now for a real challenge: handle all possible cases where sourceArr and destArr are the same array, including wraparound, not overwriting original array  data prematurely, nor extending it, but copying all data in-place. If arr.length is 100, how would you handle significant wraparound and overwriting, such as arrBufferCopy(arr,arr,30,80,95)? 

- Smarter Sum
Use time-space tradeoff to accelerate average running time for iSigma(num) that returns sum of  integers from 1 to num. Recall iSigma(1)=1, iSigma(2)=3, iSigma(3)=6, iSigma(4)=10.

- Faster Factorial
Remember Factorial(num)? It returned the product of positive integers from 1 to num. Examples: 
Factorial(1) = 1, Factorial(2) = 2, Factorial(3) = 6. For these purposes, Factorial(0) = 
1. Recreate this function, but use a time-space tradeoff to accelerate the average running time.

- Fancy Fibonacci
Use time-space tradeoff to accelerate running time of iFib(num) that returns numth number in the  Fibonacci sequence. Recall iFib(0)=0, iFib(1)=1, iFib(2)=1, iFib(3)=2.

- Tricky Tribonacci
Why stop with fibonacci? Create a function to retrieve a “Tribonacci” number, which we will define as the sum of the previous 3 values. Tribonaccis start with { 0, 0, 1, 1, 2, 4, 7, 13, 24, 44,  81, ... }. Again, use a time-space tradeoff to make it fast.