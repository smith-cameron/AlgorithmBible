 Median of Sorted Arrays
Given two arrays that are sorted but not
necessarily the same length, find the median 
value. Given ([1,5,9], [1,2,3,4,5,6]), 
return 4. If the number of values is even, return 
the average of the two middle values. Given 
([1,5,9], [1,2,3,4,5]), return 3.5. 
Second: accept three arrays instead of two. 
Third: handle an arbitrary number of arrays. 
 Time to English
You are given an integer representing the 
number of minutes that have elapsed since 
midnight. You should return a string representing 
the current time, in traditional spoken convention. 
Use numerals, except specifically the following 
words – midnight, noon, past, til, half, quarter. 
Examples: if given 30, return "half past
midnight". If given 75, return "quarter past 
1 am". If given 710, return "10 til noon". If 
given 1000, return "20 til 5 pm". 
 Missing Value
You are given an array of length N that contains, in no particular order, integers from 0 to N. One 
integer value is missing. Quickly determine and return the missing value. Given ([3,0,1]), return 2.
Second: now the lowest value can now be any integer (including negatives), instead of always being 0. 
Given ([2,-4,0,-3,-2,1]) return -1. Given ([5,2,7,8,4,9,3]), return 6. 
 Rain Terraces
The Seattle Coding Dojo wants to send excess water to the Burbank Coding Dojo, so it landscapes its 
rooftop with a set of unusual elevated terraces. The terraces are all the same width, but have varying 
heights. When it rains, water gathers in the low terraces that are surrounded by taller ones. For 
example, if we have terraces with heights [3,1,1,4,2], then as much as 4 units of water could be
gathered, because water would pool 2-deep on two different terraces (both of the 1-high terraces:
between the 3-high and 4-high terraces). Water on the other terraces just runs off the sides. Given an 
array of terrace heights, return the maximum amount of water that is trapped when rains come.

Data Sufficiency
One important problem solving concept is the idea of data sufficiency. In algorithm challenges and realworld problems, having a piece of data doesn’t necessarily make it important. Often code will run faster 
if we discard unneeded data. In fact, sometimes your code cannot run until you let go of it! 
 Last Digit of A to the B
Modern computers can handle very large numbers, but they do have their limits. A number that is 
repeatedly multiplied by itself will eventually exceeds a computer’s ability to accurately represent it. 
(Note: the number of times it is multiplied by itself is called an exponent.) For an optional end-of-chapter 
challenge, determine the smallest (least significant) digit of a number that is potentially very, very large. 
You may find that you must do this without computing the actual (unimaginably large) number.
Implement a function lastDigitAtoB(a,b) that accepts two non-negative integers. It should return 
the last digit of a number found by raising the first number (a) to an exponent of the second number (b). 
Examples: given (3,4), you should return 1 (3 * 3 * 3 * 3 is 81, whose last digit is 1). Given (12,5), 
return 2 (which is the least significant digit of 248832: 12 * 12 * 12 * 12 * 12). How high can you scale
your solution? For example, what is the return value for (237,124)?
 Matrix Search
Mike digs image recognition and wants to create a JavaScript Imaging Library, just like PIL for Python. 
He is given 2 different two-dimensional arrays, containing integers between 0 and 65535. Each twodimensional array represents a gray-scale image, where each integer value is a pixel. The second
image might be found somewhere within the larger one. Return whether it is. 
Given array: [ [12,34,45,56], and array: [ [67,78], return true.
[98,87,76,65], [43,32]]
[56,67,78,89],
[54,43,32,21]]
Second: Return location of first match found ([-1,-1] if no match). In example above, return [2,1]. 
 Max of Subarray Sums
How efficient can you be on this following final challenge? The input may hold many million values. 
Given a numerical array that is potentially very long, return the maximum sum of values from a 
subarray. Any consecutive sequence of indices in the array is considered a subarray. Create a function
that returns the highest sum possible from these subarrays. Given [1,2,-4,3,-2,3,-1], you should
return 4 (for subarray [3,-2,3]), and given [-1,-2,-4,-3,-2,-3], return 0 (for []). This problem 
has many possible implementations. Which do you prefer & why?
