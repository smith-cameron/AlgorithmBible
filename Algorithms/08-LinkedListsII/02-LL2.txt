 SList: Sum Numerals
You are given two lists, each representing a 
number. Every node value is a 0-9 digit, with first
node representing least significant digit. Return a 
new list representing the sum. Given 2=>0=>1 & 
8=>4, return 0=>5=1 because 102 + 48 = 150.
Second: what if first node is most significant? 
 SList: Setup Loop
In preparation for tomorrow, create a sequence
of slNodes that form a closed loop. Your 
function’s first argument should signify how many 
nodes total, and the second should be which 
node number is pointed to by the last node. Give 
nodes sequential numbers as values, for clarity. 
Calling setupLoop(5, 3) should return a circular 
list of 1=>2=>3=>4=>5=>3=>4=>5=>3....
 SList: Flatten Children
Why limit nodes to contain only one pointer? In
this challenge, each node has .next, but also 
.child that is either null or points to another 
head. In turn each child node could point to 
another list. Don’t alter .child; arrange .next
pointers to ‘flatten’ the hierarchy into one linear 
list, from head through all others via .next. 
 SList: Unflatten Children
Take the output from your “flatten child lists” 
function (a linear linked list containing nodes with 
.child pointers), and restore it to its original 
state. Do you need to change your flatten
function to enable this? 
Second: for flatten & unflatten, in the case 
of really complex inputs, how many nested FOR
(or WHILE) loops might you have? Can you solve 
without nested loops, even for complex inputs?