 SList: Has Loop
Ben sends linked lists to Emma, but she doesn’t
quite trust him. Is he trying to make her code spin 
infinitely? Given a linked list, determine whether it 
has a loop, and return a boolean accordingly.
 SList: Break Loop
Even better than finding where the loops start 
would be to just fix them. You will be given a 
potentially loopy list; determine whether there is a
loop, and if so, break it. Retain all nodes, in 
original order. 
 SList: Loop Start
For Emma to expose Ben’s nefarious intentions,
she needs to locate the loops. Given a linked list, 
return a pointer to the node where a loop begins
(where the last node points), or null if no loop.
 SList: Number of Nodes
Given a linked list with or without a loop, return 
total number of nodes. Given circular list 
k=>e=>l=>v=>i=>n=>l=>v=>..., return 6.
 SList: Swap Pairs
Given a singly linked list, rearrange the nodes so that successive pairs of nodes are swapped in
sequence. If list has an odd number of nodes, the final node (not part of a pair) should be unchanged. 
For mySList a=>b=>c, mySList.swapPairs() should change the mySList object to b=>a=>c. 
For mySList a=>b=>c=>d, mySList.swapPairs() should change it to b=>a=>d=>c.
