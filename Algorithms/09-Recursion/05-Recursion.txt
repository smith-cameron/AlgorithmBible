

 Is Chess Move Safe
isChessMoveSafe(intendedMove,queen)
returns true if square is threatened, else false. 
It takes a location object for both the square to 
check, and current location of opposing queen.
Second: accept an array of queens. 
 Eight Queens
Build eightQueens() using previous solutions.
Return all arrangements of eight queens on an 
8x8 chessboard, so no queen threatens any 
other. How would you best return these results? 
Second: write a helper function that displays the
queens-located-on-the-board results returned, in 
awesomely-retro character graphics, using 
console.log().
 All Safe Chess Squares
Build on your solution to the previous challenge, 
to create allSafeChessSquares(queen) that
returns all chessboard squares not threatened by 
a given queen.
Second: accept an array of queens. 
 N Queens
Create nQueens(n,xSize,ySize) using 
previous work, returning all arrangements of N 
unthreatened queens on X by Y rectangular 
board. eightQueens() == nQueens(8,8,8).
Second: optimize your solution so that you can 
extend n, xSize and ySize as far as possible 
before you exhaust the available memory. Can 
you get as high as 15 queens on a 15x15 board? 