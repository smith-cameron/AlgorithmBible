 String to Word Array
Given a string of words (with spaces, tabs and 
linefeeds), returns an array of words. Given 
"Life is not a drill!" return ["Life", 
"is" "not", "a", "drill!"].
Bonus: handle punctuation.
 Reverse Word Order
Create a function that, given a string of words 
(with spaces), returns new string with words in 
reverse sequence. Given "This is a test",
return "test a is This".
Bonus: handle punctuation and capitalization.
Example: given "Life is not a drill, go
for it!" you should return "It for go, 
drill a not is life!"
 Longest Word
Create a function that, given a string of words,
returns the longest word. Example: given "Snap
crackle pop makes the world go 
round!", return "crackle".
Bonus: handle punctuation.
 Unique Words
Given a string, retain words that occur only once.
Given "Sing! Sing a song; sing out
loud; sing out strong.", return "Sing!
Sing a song; loud; strong". Punctuation 
is part of the word: "Sing!" is not "Sing".
Bonus: ignore punctuation and capitalization.
Ex.: given "Sing a song! Sing a song; 
sing out loud and strong.", return "out
loud and strong"
 String: Rotate String
Create a standalone function that accepts a 
string and an integer, and rotates the characters 
in the string to the right by that amount. Example: 
given ("Boris Godunov",5), you should
return "dunovBoris Go". 
 Censor
Create a function that, given string and array of 
‘naughty words’, returns new string with naughty 
words changed to “x” chars. Given ("Snap
crackle pop nincompoop!", ["crack",
"poop"]), you should return "Snap xxxxxle 
pop nincomxxxx!" (after giggling a little bit).
Second: handle capitalization appropriately. 
 String: ionIs Rotat (Is Rotation)
Create the function isRotation(str1,str2)
that returns whether the second string is a 
rotation of the first. Would you change your
implementation if you knew that the two were 
usually entirely unrelated? 
 Bad Characters
Given two strings, the second string contains 
characters that must be removed from the first.
Return string formed by removing any instances
of those characters from the first string. 
 Genetic Marker
Create a function that, given an array of strings and a string, returns a boolean whether the string is 
found anywhere in the array of strings. Note: strings found in the array might contain the ‘?’ wild-card 
character, signifying that it can represent any character needed in order to complete a match.
 Optimal Sequence
You will be given an array of strings. All of these strings are the same length, and all contain only 
upper-case alphabetical characters or the ‘?’ character. The ‘?’ is a single-character wild-card; you can 
change it into any character needed. Return the sequence of words satisfying the following constraints: 
1) From first word to last word, each column of letters must be in alphabetical order.
2) All question-mark characters must be expanded into their explicit values in the return array. 
3) If more than one solution exists, return the one with lower overall alphabetical value. 
4) If no solution exists, return null. 
Examples: given the array ["EA?K","?RX?","GAG?"], return ["EAAK","GAGK","GRXK"]. 
For the array ["?F??","W??S","??X?"], your function should return ["AAXA","AFXA","WFXS"]. 
For an input of ["?UD","FI?","A?E"], return null.