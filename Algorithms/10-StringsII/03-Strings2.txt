 Are Strings Loosely Interleaved
Given three strings, return boolean whether third string is a proper (no dupes) interleaving of first two.
Given ("dne","ail","daniel") return true. Given ("dne","ail","dalein") return false. 
For ("dne","ail","ddaanneeiill") return false. 
 All Loosely Interleaved Strings
Given two strings, return an array containing all possible proper interleavings of those strings. Given 
("ab","yz"), your function should return ["abyz","aybz","ayzb","yabz","yazb","yzab"]. 
Second: Ensure no duplicates in your returned result array.
 Make String Palindrome (Remove One)
Given a string, return index of the first character which, if removed, converts string into a palindrome. If 
string is already palindromic, return -1. Given "bene" return 0 ("ene"). Given "dude" return 3
("dud"). Given "bub", return -1. You can assume there will always be a solution, for the string 
provided. 
 Make String Palindrome (Add One)
Given a string, return a character which, if added somewhere in the string, converts it into a palindrome.
If string is already palindromic, return "". Given "tutu" return "u" or "t". Given "dude" return "e". 
Given "dad", return "". You can assume there will always be a solution, for the string provided.
 String Encode
You are given a string that may contain sequences of consecutive characters. Create a function to 
shorten a string by including the character, then the number of times it appears. For "aaaabbcddd", 
return "a4b2c1d3". If result is not shorter (such as "bb"=>"b2"), return the original string. 
 String Decode
Given an encoded string (see above), decode and return it. Given "a3b2c1d3", return "aaabbcddd". 
 Shortener
Given string and desired length, return a maximally readable string of that length, using this process:
0) Remove any leading or trailing spaces (or conversely, pad on both sides out to the desired length),
1) Capitalize each word before removing spaces between words (starting from the back), 
2) Remove punctuation, starting from the back, 
3) Remove lower-case letters (vowels first), from the back, 
4) Remove upper-case letters, from the back.
Given a string "It's a wonderful life, Beth! ", desired outputs for the following lengths are:
33 " It's a wonderful life, Beth! "
26 "It's A WonderfulLife,Beth!"
22 "It'sAWonderfulLifeBeth" 
17 "ItsAWonderflLfBth"
12 "ItsAWndrflLB" 
3 "IAW" 
 Weekend Challenge: Strings, Part II (Search with Regex)
Remember a few weeks ago when we recreated JavaScript’s built-in String methods? Let’s add a
powerful new feature to String.search(val). As you recall, this method searches string for a
given val (another string), and returns the index position of the first match found (-1 if not found). 
Your weekend challenge: regular expression support! Below are a few examples how this should work: 
"dude".newSearch("[q-z]") should return 1. "dude".newSearch("(ud)") should return 1. 
"dude".newSearch("[^a-e]") should return 3. "dude".newSearch("d$") should return -1. 
This is a very difficult (weekend-level) challenge and will require additional research. Are you up for it? 