In order to move from one node to its successor, sometimes we will need to traverse to a node’s
parent. How costly would it be to add a .parent pointer to our BTNode class? Would we need to 
make any changes to the BST class itself? 
Answer: the BST methods add(), isValid(), remove() and addNoDupes(), as well as the
BTNode method isValid(), plus both constructors would need to change to incorporate .parent
into BTNode. For example, the BTNode constructor would need to include this.parent = null;. 
Secondly, the BTNode.isValid method would need to ensure that if (this.left), then 
(this.left.parent == this). Also, a.isValid should ensure that this.root.parent is 
always null. Even more complex, though, are the required changes to the add and remove methods, 
where we need to account for both sides when making a change to the BST (not unlike when making
changes to a DList!). 
 BST With Parent
Create a BTNode2 data structure (and the necessary changes for an accompanying BST2) that adds a 
.parent. When is it more optimal? Is it worth the trouble? Work out the changes to prove it to yourself!
 Sum of BST Root-Leaf Numbers
Given a binary tree (not necessarily a BST) that contains values between 0 and 9, we consider the 
digits encountered in order when traversing from root-to-leaf to be that path’s root-leaf number. The
root-leaf path 4->2->3 represents the root-leaf number 423. Find the sum of all root-leaf numbers found 
in the provided binary tree. 
 Left-Side Binary Tree
Given a binary tree, create and return an array containing the values that you would see if you 
metaphorically stood to the left of the tree and looked sideways at it. You will see the root, of course, 
plus only the leftmost of children at each level.