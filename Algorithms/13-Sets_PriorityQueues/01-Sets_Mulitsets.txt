Sets and Multisets 
Whether working with a deck of cards or results from a database query, we constantly work with sets – 
a mathematical term for collections of values that we group together. Just as there are many reasons to
group values together, likewise there are different types of sets, each useful in certain situations.
Specifically, you might care how a set handles duplicates, and whether it keeps values ordered.
By default, sets do not contain duplicate values; adding value 42 to the set (“Zork”, “grue”, 42), you still 
have (“Zork”, “grue”, 42). Ex.: when gathering nominations for Best Restaurant in Town, the nominee
list is a set. There can also exist sets that contain duplicate values; these are multisets. In collections 
of this type, duplicate values matter: multiset (1, 1, 1, 3) and multiset (1, 1, 3, 3) are not equivalent.
Example: after a public vote for favorite restaurant, during the vote-counting process we could use a 
multiset, such as (Joe’s, Joe’s, Mel’s, Joe’s, Joe’s...).
For some sets, the order matters (such as words in a dictionary). This type is called an ordered set.
For others (e.g.: members of a club), it doesn’t: these are unordered sets. More on these tomorrow!
What can we do with these different flavors of set? You might add an element, remove one, or check
whether the set contains a certain element, and if so how many. With ordered sets, we can also retrieve
first or last element, and from any element get next or previous. These are standard operations for any 
data structure that we use to collect values, such as an array or a singly linked list.
Throughout the chapter, remember these set types:
Set Multiset Ordered Unordered
 Interleave Arrays
Given two unsorted arrays, create a new array containing the elements of both, resulting in an unsorted
merge of all values. When populating the new array alternate (interleave) values between the two
arrays until one is exhausted, then include all of the other. Example: given [77,22,11,22] and 
[2,6,7,2,6,2], return [77,2,22,6,11,7,22,2,6,2].
 Merge Sorted Arrays
Efficiently merge two already-sorted arrays into a new sorted array containing the multiset of all values.
Example: given [1,2,2,2,7] and [2,2,6,6,7], return new array [1,2,2,2,2,2,6,6,7,7].
 Minimal Three-Array Range
Given three separately-sorted arrays, determine the value from each array that creates the smallest
range, and return the min and max of that range. All three of the arrays must have a value within the
range. Example: given ([1,2,4,15],[3,10,12],[5,10,13,17,23]), return {min:3,max:5}