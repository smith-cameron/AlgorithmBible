Priority Queues
What if, instead, we created a data structure that acted like a Queue, but did care about values instead 
of insertion time. This data structure would maintain its elements in value order, regardless of the order
in which they were added. We could extract (pop, dequeue) an element at a time, and always get the 
lowest value. This is valuable as (for example) a way to prioritize a list of to-do items so that when we 
take an item from the Queue, it is always the most important one. In fact, OS subsystems such as 
networking and storage work in this way: diverse I/O requests are continually added to a prioritized 
queue, and the system extracts (and satisfies) them in priority order. Let us build this Priority Queue. 
 SList: Priority Queue
We want to create a Queue data structure that keeps its elements in sorted order, so that when we call
pop(), we get the first element in sorted order (rather than sequential order, like a regular FIFO queue). 
Create a PriQueue data structure by making changes to SLQueue and SLNode:
A PriQNode class should be identical to SLNode, plus .pri, which is set by an additional argument 
passed to the constructor. The PriQueue push() method should accept both value and priority, and 
priority should be used to add the node at the right spot (instead of at queue’s end). 
 Sequencer
Using a singly linked list priority queue object, build a system that orders and “plays” messages uses
the system timestamp (get this by calling Date.now()). Create two functions that are used as follows: 
sequenceMessage([2000000000000, "Msg 4"]);
sequenceMessage([1453506544890, "Msg 2"]);
sequenceMessage([1453506544900, "Msg 3"]);
sequenceMessage([1000000000000, "Msg 1"]); 
// assume current time is now 1453506544898
playMessages(); // "Msg 1", then "Msg 2" are logged to console
// ...assume time passes, and now current time is now 1453506544915
playMessages(); // "Msg 3" is logged to console
Your sequenceMessage(arr) will be sent a two-element array, containing a timestamp and a string. 
The timestamp is in milliseconds, and corresponds to values obtained by Date.now(). Sort messages 
by ascending timestamp. When playMessages() is called, console.log (in order) the strings of
messages with timestamps in the past, and remove them from your list.
