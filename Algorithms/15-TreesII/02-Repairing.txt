Repairing a Binary Search Tree
If it is possible with isValid() to detect whether a BTNode is in an incorrect location, then it should
also be possible to repair an invalid BST. Unfortunately, once we find an invalid node, we have no
guarantee about the nodes below it – so our only recourse is to reinsert all of the subtree nodes (not 
just the one node we found to be invalid).
 BST: Repair
Sometimes it is hard to find good help. Oscar is working with a third-party library that receives data from 
outside sources and sorts it into a binary search tree. Oscar is positive the library has bugs, because
sometimes the BSTs it produces don’t meet the requirements of a BST. Given a potentially invalid BST
object, create a standalone function bstRepair(BST) that rearranges nodes as needed to make it 
valid. Return true if you repaired the BST, or false if this was not needed. 
 BST: Smallest Difference
Given a valid BST, return the smallest difference between any two values in the tree. What are the runtime and space complexities of your solution? Would it be less efficient if BST was very unbalanced? 
 SList: Smallest Difference
Given sorted singly linked list, return the smallest difference between values. What are the run-time and 
space complexities of your solution? 
 BST: Closest Value (again)
Given valid BST and number, return the tree 
value closest to that number. What are the runtime and space complexities of your solution? 
 SList: Closest Value
Given sorted SList and number, return the list 
value closest to that number. What are the runtime and space complexities of your solution? 
 Array: Closest Value
Given sorted array and number, return the array 
value closest to that number. What are the runtime and space complexities of your solution? 
 DList: Closest Value
Given sorted DList and number, return the list 
value closest to that number. What are the runtime and space complexities of your solution?
Part2 ------------------------
 BST: Kth-Biggest
Given a valid Binary Search Tree, find the Kth-largest element contained in that tree. 
Second: if above you took advantage of the .size() method, write a version without it. If you did not 
use .size() originally, write a version that does.
 Test Cases for BST2 Repair
In the challenge following this one, we will write code to detect and repair a potentially invalid BST2. 
Before you start that, here is a related challenge: what test cases would you create to ensure that your 
solution detects and correctly fixes the possible error cases? For this challenge, a test case is a BST
that you send to bst2Repair(BST2). 
 BST2: Repair
Given a potentially invalid BST2, create standalone function bst2Repair(BST2) to detect whether it 
is invalid. If so, fix it and return true (if not, return false). Potential problems include incorrectly 
placed nodes, as well as incorrect pointers (.parent, .left, .right) that create loops, etc.